// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String?
  lastName  String?
  email     String   @unique
  password  String?
  timezone  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  habits    Habit[]
  scheduledReminders ScheduledReminder[]
}

model Habit {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId

  name       String
  notes      String?
  currentStreak Int
  longestStreak Int
  daysOfWeek Int[]    // 0 = Sunday, 6 = Saturday

  goal       Json?     // e.g., { type: "boolean" } or { type: "numeric", target: 30, unit: "minutes" }
  emailReminderSettings Json  // e.g., { enabled: true, timesOfDay: ["08:00", "20:00"] }

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  logs       HabitLog[]
  scheduledReminders ScheduledReminder[]
}

model HabitLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  habit     Habit    @relation(fields: [habitId], references: [id])
  habitId   String   @db.ObjectId

  userId    String   @db.ObjectId  // denormalized for easier querying
  date      DateTime
  completed Boolean
  progress  Int?
  notes     String?
  createdAt DateTime @default(now())
}

model ScheduledReminder {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  habitId    String   @db.ObjectId
  userId     String   @db.ObjectId
  sendAt     DateTime // UTC 
  createdAt  DateTime @default(now())

  habit      Habit    @relation(fields: [habitId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}